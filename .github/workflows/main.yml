name: Build workflow
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches:
      - "main"

  workflow_dispatch:
  
  schedule:
    - cron: '10 14 * * 1-5'  # At 14:10 every weekday
env: 
  ECR_REPOSITORY: 'vprofile-appimage'

permissions:
  contents: read
  
jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - name: code checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Mvn Build
        run: mvn install

      - name: Upload artifact (WAR)
        uses: actions/upload-artifact@v4
        with:
          name: vprofile-app
          path: target/*.war
      
      - name: Notify if build fails
        if: failure()
        run: echo "Build failed!" "Please check the logs."
         
  Testing:
    runs-on: ubuntu-latest
    needs: Build

    steps:
      - name: code checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Run tests on main branch
        if: github.ref == 'refs/heads/main'
        run: mvn test

      - name: Run tests on non-main branches
        if: github.ref != 'refs/heads/main'
        run: echo "Skipping unit tests and code analysis on non-main branches"
  Security-Scan:
    runs-on: ubuntu-latest
    needs: Build

    steps:
      - name: code checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Run Trivy filesystem Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: .
          format: json
          exit-code: 0
          vuln-type: 'os,library'
          output: trivy-results.json
          
      - name: Upload Trivy scan result as artifacts 
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-results
          path: trivy-results.json
  BUILD_AND_PUBLISH:
    name: Build and Publish Docker image to ECR
    runs-on: ubuntu-latest
    environment: production
    needs: [Build, Testing, Security-Scan]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: code checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        id: login-ecr
        uses: aws-actions/amazon-ecr-build-push@v2

      - name: Build, tag and push to ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}

        run: |
          docker build -f Docker-files/app/multistage/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT